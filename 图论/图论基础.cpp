#include <iostream>

using namespace std;

int main() {

    /*
     1.图的种类：有向图、无向图;加权、无权。

     2.度：有几条边连接该节点，该节点就有几度；出度：从该节点出发的边的个数，
     入度：指向该节点边的个数。

     3.在无向图中，任何两个节点都是可以到达的，我们称之为连通图；
     在有向图中，任何两个节点是可以相互到达的，我们称之为 强连通图。

     4.在无向图中的极大连通子图称之为该图的一个连通分量，必须是最大的子图，不能只是局部的连通图。
     在有向图中极大强连通子图称之为该图的强连通分量
     */


    /*
     图的构造：
     1.邻接矩阵
     在边少，节点多的情况下，会导致申请过大的二维数组，造成空间浪费；
     适合稠密图，在边数接近顶点数平方的图中，邻接矩阵是一种空间效率较高的表示方法。

     2.邻接表
     邻接表 使用 数组 + 链表的方式来表示。 邻接表是从边的数量来表示图，有多少边 才会申请对应大小的链表。
     邻接表的优点：
     对于稀疏图的存储，只需要存储边，空间利用率高
     遍历节点连接情况相对容易

     缺点：
     检查任意两个节点间是否存在边，效率相对低，需要 O(V)时间，V表示某节点连接其他节点的数量。
     实现相对复杂，不易理解
     */

     /*
      图的遍历方式：
      1.bfs
      2.dfs
      */


}